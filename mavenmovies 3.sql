---------------------------------- assignment 3 ----------------------------------
use mavenmovies;
-- 1. **Rank the customers based on the total amount they've spent on rentals.**

SELECT
    customer_id,
    first_name,
    last_name,
    total_amount_spent,
    RANK() OVER (ORDER BY total_amount_spent DESC) AS 'rank'
FROM (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_amount_spent
    FROM
        customer c
    JOIN
        payment p ON c.customer_id = p.customer_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
) AS customer_total_amount
ORDER BY
    total_amount_spent DESC;
    
-- 2. **Calculate the cumulative revenue generated by each film over time.**
SELECT
    f.film_id,
    f.title AS movie_title,
    p.payment_date,
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
JOIN
    payment p ON r.rental_id = p.rental_id
ORDER BY
    f.film_id, p.payment_date;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
SELECT
    f.film_id,
    f.title AS movie_title,
    f.length,
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    f.film_id, f.title, f.length
ORDER BY
    f.film_id;

-- 4. **Identify the top 3 films in each category based on their rental counts.**
WITH RankedFilms AS (
    SELECT
        f.film_id,
        f.title AS movie_title,
        fc.category_id,
        ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS ranking
    FROM
        film f
    JOIN
        film_category fc ON f.film_id = fc.film_id
    JOIN
        inventory i ON f.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        f.film_id, f.title, fc.category_id
)
SELECT
    rf.film_id,
    rf.movie_title,
    rf.category_id,
    rf.ranking
FROM
    RankedFilms rf
WHERE
    rf.ranking <= 3
ORDER BY
    rf.category_id, rf.ranking;
    
-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
-------- across all customers.**
WITH CustomerRentalCounts AS (
    SELECT
        c.customer_id,
        COUNT(r.rental_id) AS rental_count
    FROM
        customer c
    JOIN
        rental r ON c.customer_id = r.customer_id
    GROUP BY
        c.customer_id
),
AverageRentalCount AS (
    SELECT
        AVG(rental_count) AS avg_rental_count
    FROM
        CustomerRentalCounts
)
SELECT
    crc.customer_id,
    crc.rental_count,
    COALESCE(crc.rental_count - arc.avg_rental_count, 0) AS rental_count_difference
FROM
    CustomerRentalCounts crc
CROSS JOIN
    AverageRentalCount arc;
    
-- 6. **Find the monthly revenue trend for the entire rental store over time.**
SELECT
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month_year,
    SUM(p.amount) AS monthly_revenue
FROM
    payment p
GROUP BY
    month_year
ORDER BY
    month_year;

-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
SELECT
    customer_id,
    first_name,
    last_name,
    total_spending
FROM (
    SELECT
        customer_id,
        first_name,
        last_name,
        total_spending,
        NTILE(5) OVER (ORDER BY total_spending DESC) AS spending_quintile
    FROM (
        SELECT
            c.customer_id,
            c.first_name,
            c.last_name,
            SUM(p.amount) AS total_spending
        FROM
            customer c
        JOIN
            payment p ON c.customer_id = p.customer_id
        GROUP BY
            c.customer_id, c.first_name, c.last_name
    ) AS CustomerTotalSpending
) AS RankedCustomers
WHERE spending_quintile = 1;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
SELECT
    category_id,
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM (
    SELECT
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM
        category c
    JOIN
        film_category fc ON c.category_id = fc.category_id
    JOIN
        film f ON fc.film_id = f.film_id
    JOIN
        inventory i ON f.film_id = i.film_id
    JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.category_id, c.name
    ORDER BY
        rental_count DESC
) AS RentalCountsByCategory;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
SELECT 
    f.film_id,
    f.title AS movie_title,
    fc.category_id,
    c.name AS category_name,
    COUNT(r.rental_id) AS rental_count
FROM
    film f
        JOIN
    film_category fc ON f.film_id = fc.film_id
        JOIN
    category c ON fc.category_id = c.category_id
        LEFT JOIN
    inventory i ON f.film_id = i.film_id
        LEFT JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id , f.title , fc.category_id , c.name
HAVING rental_count < (SELECT 
        AVG(rental_count)
    FROM
        (SELECT 
            fc.category_id, COUNT(r.rental_id) AS rental_count
        FROM
            film_category fc
        JOIN film f ON fc.film_id = f.film_id
        JOIN inventory i ON f.film_id = i.film_id
        JOIN rental r ON i.inventory_id = r.inventory_id
        GROUP BY fc.category_id) AS AvgRentalCounts
    WHERE
        AvgRentalCounts.category_id = fc.category_id);
        
-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
SELECT
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month_year,
    SUM(p.amount) AS monthly_revenue
FROM
    payment p
GROUP BY
    month_year
ORDER BY
    monthly_revenue DESC
LIMIT 5;








